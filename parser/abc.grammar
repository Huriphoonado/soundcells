@precedence { dotted @left }
@top Program { (lineWithNewline | emptyLine)* lineWithoutNewline?  }

lineWithNewline { expression newline }
lineWithoutNewline { expression }
emptyLine { newline }

expression { music | Metadata }

Metadata {
    Book |
    Composer |
    Discography |
    FileURL |
    KeySignature |
    NoteLength |
    Rhythm |
    Source |
    Tempo |
    TimeSignature |
    Title |
    TuneNumber |
    Words |
    Transcription
}

Book {"B:" text}
Composer { "C:" text }
Discography { "D:" text }
FileURL { "F:" text}
KeySignature { "K:" key }
NoteLength { "L:" number }
Rhythm { "R:" text}
Source { "S:" text}
Tempo { "Q:" string? (frac (frac)* '=')? int string? }
TimeSignature { "M:" (number | 'C') }
Title { "T:" text }
TuneNumber { "X:" int }
Words { ("W:" | "w:") text}
Transcription { "Z:" text}

music { Barline | Barline? pattern+ }
pattern { SlurStart | SlurEnd | DottedRhythm | event | event Barline | SlurEnd Barline }

DottedRhythm { event !dotted Dot event }

event { Note | Rest | Chord }

Chord { "[" Note+ "]" }
Note {Accidental? Pitch (Duration? Octave? | Octave? Duration?) }

Rest { 'z' Duration?}

Barline {
    '|'  |
    '||' |
    ':|' |
    '|:' |
    '|]' |
    ':||:'
}

@tokens {
    char { ![ \t\n\r%] }

    string { '"' (char | whitespace)* '"' }
    text { char+ | char+ (char | whitespace)+ char+ }

    Comment { '%' ![\n\r]* }

    int { '0' | $[1-9] std.digit* }
    frac {$[1-9] std.digit* whitespace* '/' whitespace* $[1-9] std.digit* }
    number { int | frac }
    @precedence {frac, int}

    pitchLetter { $[abcdefgABCDEFG] }
    key { pitchLetter ('b' | '#')? ('m')? }

    Pitch { pitchLetter }
    Accidental { '_'+ | '=' | '^'+ }
    Octave { $[,']+ }
    Duration { number }
    Dot { '<'+ | '>'+ }

    SlurStart { '(' }
    SlurEnd { ')' }

    newline { $[\n\r]+ }
    whitespace { $[ \t]+ }
}

@skip {whitespace | Comment}
